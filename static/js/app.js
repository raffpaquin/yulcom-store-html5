// Generated by CoffeeScript 1.6.3
(function() {
  var $, Backbone, Handlebars, ModelRegistry, Modernizr, Yulcom, app, _, _ref, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.app = {
    debug: true,
    collections: {},
    models: {},
    views: {},
    config: {}
  };

  window.Yulcom = {
    Collection: {},
    Model: {},
    View: {}
  };

  app = window.app;

  Yulcom = window.Yulcom;

  $ = window.$;

  _ = window._;

  Backbone = window.Backbone;

  Modernizr = window.Modernizr;

  Handlebars = window.Handlebars;

  Backbone.emulateHTTP = true;

  _.extend(app, Backbone.Events);

  app.init = function() {
    this.customer = new Yulcom.Model.Customer();
    this.models.cart = new Yulcom.Model.Cart();
    this.customer.init();
    this.collections.products = new Yulcom.Collection.Product();
    this.collections.address = new Yulcom.Collection.Address();
    this.collections.cc = new Yulcom.Collection.Cc();
    this.views.header = new Yulcom.View.Header();
    this.views.page = new Yulcom.View.Page();
    this.views.header.render();
    this.router = new Yulcom.Router();
    Stripe.setPublishableKey(app.get('stripe_public_key'));
    return this;
  };

  app.get = function(key) {
    return this.config[key];
  };

  app.error = function(msg, scope) {
    if (msg == null) {
      msg = 'Unknown Server Error';
    }
    if (scope == null) {
      scope = 'body';
    }
    if ('' === msg) {
      if ($('.alert', scope).length > 0) {
        return $('.alert', scope).slideUp(200);
      }
    } else {
      if ($('.alert', scope).length > 0) {
        return $('.alert', scope).first().text(msg).slideDown(200);
      } else {
        return alert(msg);
      }
    }
  };

  app.load = function(active, scope) {
    if (active == null) {
      active = true;
    }
    if (scope == null) {
      scope = 'body';
    }
    $('.btn', scope).toggleClass('loading', active);
    if (active) {
      return this.error('');
    }
  };

  app.config = window.configs;

  /* --------------------------------------------
       Begin page.coffee
  --------------------------------------------
  */


  Yulcom.View.Page = (function(_super) {
    __extends(Page, _super);

    function Page() {
      _ref = Page.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Page.prototype.el = '#content';

    Page.prototype.ressources = {
      template: null,
      collection: {},
      model: {},
      sub_view: {},
      title: null
    };

    Page.prototype.queue = {
      template: 0,
      collection: 0,
      model: 0,
      callback: []
    };

    Page.prototype.data = {};

    Page.prototype.action = {};

    Page.prototype.reset = function() {
      this.data = {};
      this.action = {};
      this.ressources = {
        template: null,
        collection: {},
        model: {},
        sub_view: {},
        title: null
      };
      return {
        queue: {
          template: 0,
          collection: 0,
          model: 0,
          callback: []
        }
      };
    };

    Page.prototype.loadCollection = function(key, collection) {
      this.ressources.collection[key] = collection;
      if (typeof collection.is_loaded === 'undefined' || collection.is_loaded === false) {
        this.queue.collection++;
        return this.ressources.collection[key].fetch({
          success: function() {
            var self;
            self = app.views.page;
            self.data[key] = collection.toJSON();
            self.queue.collection--;
            return self.render();
          }
        });
      } else {
        this.data[key] = collection.toJSON();
        return this.render();
      }
    };

    Page.prototype.loadModel = function(key, model) {
      this.ressources.model[key] = model;
      if (typeof model.is_loaded === 'undefined' || model.is_loaded === false) {
        this.queue.model++;
        return this.ressources.model[key].fetch({
          success: function() {
            var self;
            self = app.views.page;
            self.data[key] = model.toJSON();
            self.queue.model--;
            return self.render();
          }
        });
      } else {
        this.data[key] = model.toJSON();
        return this.render();
      }
    };

    Page.prototype.loadJSON = function(key, obj) {
      return this.data[key] = obj;
    };

    Page.prototype.loadTemplate = function(template_id) {
      this.ressources.template = template_id;
      this.queue.template++;
      return app.template.loadTemplateHtml(template_id, function(response) {
        var self;
        self = app.views.page;
        self.queue.template--;
        return self.render();
      });
    };

    Page.prototype.loadSubView = function(selector, template_id) {
      this.ressources.sub_view[template_id] = {
        template: template_id,
        selector: selector
      };
      this.queue.template++;
      return app.template.loadTemplateHtml(template_id, function(response) {
        var self;
        self = app.views.page;
        self.queue.template--;
        return self.render();
      });
    };

    Page.prototype.callback = function(callback) {
      return this.queue.callback.push(callback);
    };

    Page.prototype.load = function(page) {
      $('body').addClass('loading');
      if (page.menu) {
        $('ul.menu li').removeClass('active');
        $('ul.menu li[data-href=' + page.menu + ']').addClass('active');
      }
      return this.render();
    };

    Page.prototype.render = function() {
      var callback, self, _i, _len, _ref1, _results;
      console.log(this.ressources.template, this.queue.template, this.queue.model, this.queue.collection);
      if (this.queue.template === 0 && this.queue.model === 0 && this.queue.collection === 0) {
        $('#content').html(app.template.render(this.ressources.template, this.data));
        self = this;
        $.each(this.ressources.sub_view, function(key, item) {
          return self.refreshSubView(key);
        });
        $('body').removeClass('loading');
        $('body').scrollTop(0);
        $('input[type=textbox]').first().focus();
        if (this.ressources.title) {
          app.router._updateTitle(app.template.renderFromStringTemplate(this.ressources.title, this.data));
        }
        _ref1 = this.queue.callback;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          callback = _ref1[_i];
          _results.push(callback());
        }
        return _results;
      }
    };

    Page.prototype.title = function(title) {
      return this.ressources.title = title;
    };

    Page.prototype.refreshModel = function(key) {
      return this.data[key] = this.ressources.model[key].toJSON();
    };

    Page.prototype.refreshSubView = function(key) {
      var item;
      item = this.ressources.sub_view[key];
      if (item) {
        return $(item.selector).html(app.template.render(item.template, this.data));
      }
    };

    Page.prototype.refreshCollection = function(key) {
      return this.data[key] = this.ressources.collection[key].toJSON();
    };

    return Page;

  })(Backbone.View);

  /* --------------------------------------------
       Begin header.coffee
  --------------------------------------------
  */


  Yulcom.View.Header = (function(_super) {
    __extends(Header, _super);

    function Header() {
      _ref1 = Header.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Header.prototype.el = $("header");

    Header.prototype.template = 'page/header';

    Header.prototype.initialize = function() {
      return app.customer.on('change:is_login', this.render);
    };

    Header.prototype.render = function() {
      var _this;
      _this = this;
      return app.template.loadTemplateHtml(this.template, function() {
        return $('header').html(app.template.render(_this.template));
      });
    };

    return Header;

  })(Backbone.View);

  /* --------------------------------------------
       Begin checkout.coffee
  --------------------------------------------
  */


  Yulcom.View.Checkout = (function(_super) {
    __extends(Checkout, _super);

    function Checkout() {
      _ref2 = Checkout.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Checkout.prototype.current_page = null;

    Checkout.prototype.order = {
      'shipping-address': 1,
      'billing-address': 2,
      'payment-method': 3,
      'review': 4
    };

    Checkout.prototype.init = function() {
      var self;
      self = app.views.page.action;
      self.current_page = null;
      return self.goTo('shipping-address');
    };

    Checkout.prototype.goTo = function(section) {
      var delta;
      if (section === this.current_page) {
        return;
      }
      if (this.order[section] == null) {
        return;
      }
      if ($('.checkout-panel li.step-' + section).length === 0) {
        setTimeout(function() {
          return app.checkout.goTo(section);
        }, 200);
        return;
      }
      if (this.order[section] > this.order[this.current_page]) {
        delta = -1;
      } else {
        delta = 1;
      }
      $('.checkout-panel').animate({
        opacity: 0,
        left: (200 * delta) + 'px'
      }, 200, 'swing', function() {
        $('.checkout-panel li.step').hide(0);
        $('.checkout-progress li').removeClass('active');
        $('.checkout-progress li.progress-' + section).removeClass('not-ready');
        if (section === 'payment-method') {
          $('.checkout-progress li.progress-billing-address').removeClass('not-ready');
        }
        $('.checkout-progress li.progress-' + section).addClass('active');
        $('.checkout-panel li.step-' + section).show(0);
        $('.checkout-panel').css({
          'left': (-1 * 200 * delta) + 'px'
        });
        return $('.checkout-panel').animate({
          opacity: 1,
          left: 0
        }, 200, 'swing', function() {
          $('.checkout-panel li.step-' + section + ' input').first().focus();
          if (section === 'payment-method') {
            return $('input.cc-num').payment('formatCardNumber');
          }
        });
      });
      this.current_page = section;
      return true;
    };

    Checkout.prototype.saveSection = function(section, data) {
      if (data == null) {
        data = false;
      }
      switch (section) {
        case 'shipping-address':
          app.load(true);
          if ($('.step-shipping-address form').is(':visible')) {
            data = app.api.stringToJson($('form#form-shipping-address').serialize().replace(/\+/g, '%20'));
            return app.views.page.action.saveAddress(data, function(model, response) {
              if ('success' === response.status) {
                return app.views.page.action.saveShippingAddress(response.data.address_id);
              } else {
                app.load(false);
                return app.error(response.message);
              }
            });
          } else {
            if (data === false) {
              app.load(false);
              if ($('.step-shipping-address .form-list li.active').length > 0) {
                if ($('input[name=same-as-shipping]').is(':checked')) {
                  return app.views.page.action.goTo('payment-method');
                } else {
                  return app.views.page.action.goTo('billing-address');
                }
              } else {
                return app.error('Please select an address', '.step-shipping-address .form-list');
              }
            } else {
              return app.views.page.action.saveShippingAddress(data);
            }
          }
          break;
        case 'billing-address':
          app.load(true);
          if ($('.step-billing-address form').is(':visible')) {
            data = app.api.stringToJson($('form#form-billing-address').serialize().replace(/\+/g, '%20'));
            return app.views.page.action.saveAddress(data, function(model, response) {
              if ('success' === response.status) {
                return app.views.page.action.saveBillingAddress(response.data.address_id);
              } else {
                app.load(false);
                return app.error(response.message);
              }
            });
          } else {
            if (data === false) {
              app.load(false);
              if ($('.step-billing-address .form-list li.active').length > 0) {
                return app.views.page.action.goTo('payment-method');
              } else {
                return app.error('Please select an address', '.step-billing-address .form-list');
              }
            } else {
              return app.views.page.action.saveBillingAddress(data);
            }
          }
          break;
        case 'payment-method':
          app.load(true);
          if ($('.step-payment-method form').is(':visible')) {
            data = app.api.stringToJson($('form#form-payment').serialize().replace(/\+/g, '%20'));
            return app.views.page.action.saveCc(data, function(model, response) {
              if ('success' === response.status) {
                return app.views.page.action.saveCcCheckout(response.data.cc_id);
              } else {
                app.load(false);
                return app.error(response.message);
              }
            });
          } else {
            if (data === false) {
              app.load(false);
              if ($('.step-payment-method .form-list li.active').length > 0) {
                return app.views.page.action.goTo('review');
              } else {
                return app.error('Please select a payment method', '.step-payment-method .form-list');
              }
            } else {
              return app.views.page.action.saveCcCheckout(data);
            }
          }
          break;
        case 'review':
          app.load(true);
          return app.api.post({
            url: 'cart/order',
            success: function(response) {
              if ('success' === response.status) {
                app.views.page.reset();
                app.views.page.loadJSON('order', response.data);
                app.views.page.loadTemplate('checkout/confirm');
                app.views.page.load({
                  menu: 'cart'
                });
              } else {
                app.error(response.message);
              }
              return app.load(false);
            },
            error: function(response) {
              app.error();
              return app.load(false);
            }
          });
      }
    };

    Checkout.prototype.saveAddress = function(addressData, callback) {
      var shippingAddress;
      shippingAddress = new Yulcom.Model.CustomerAddress();
      return shippingAddress.save(addressData, {
        success: function(model, response) {
          if ('success' === response.status) {
            model.set('_id', response.data.address_id);
            app.collections.address.add(model);
            app.views.page.refreshCollection('address');
          }
          return callback(model, response);
        },
        error: function(response) {
          app.error('Unknown server error');
          return app.load(false);
        },
        wait: true
      });
    };

    Checkout.prototype.saveShippingAddress = function(addressId, callback) {
      return app.api.post({
        url: 'cart/shipping-address',
        data: {
          address_id: addressId
        },
        success: function(response) {
          var sameAsShippingForBilling;
          if ('success' === response.status) {
            sameAsShippingForBilling = $('input[name=same-as-shipping]').is(':checked');
            app.models.cart.set(response.data);
            app.views.page.refreshModel('cart');
            app.views.page.refreshSubView('checkout/step_billing_address');
            app.views.page.refreshSubView('checkout/step_shipping_address');
            app.views.page.refreshSubView('checkout/step_review');
            if (sameAsShippingForBilling) {
              app.views.page.action.goTo('payment-method');
            } else {
              app.views.page.action.goTo('billing-address');
            }
          } else {
            app.error(response.message);
          }
          return app.load(false);
        },
        error: function(response) {
          return app.error();
        }
      });
    };

    Checkout.prototype.saveBillingAddress = function(addressId, callback) {
      return app.api.post({
        url: 'cart/billing-address',
        data: {
          address_id: addressId
        },
        success: function(response) {
          if ('success' === response.status) {
            app.models.cart.set(response.data);
            app.views.page.refreshModel('cart');
            app.views.page.refreshSubView('checkout/step_billing_address');
            app.views.page.refreshSubView('checkout/step_shipping_address');
            app.views.page.refreshSubView('checkout/step_review');
            app.views.page.action.goTo('payment-method');
          } else {
            app.error(response.message);
          }
          return app.load(false);
        },
        error: function(response) {
          return app.error();
        }
      });
    };

    Checkout.prototype.saveCc = function(ccData, callback) {
      ccData.number = ccData.number.replace(/\+/g, '');
      return window.Stripe.createToken(ccData, function(code, response) {
        var cc;
        if (response.error) {
          app.error(response.error.message, 'form#form-payment');
          $('form#form-payment input[name=' + response.error.param + ']').select();
          return app.load(false);
        } else {
          cc = new Yulcom.Model.CustomerCc();
          return cc.save({
            token: response.id
          }, {
            success: function(model, response) {
              if ('success' === response.status) {
                model.set('_id', response.data.cc_id);
                app.collections.cc.add(model);
                app.views.page.refreshCollection('cc');
              }
              return callback(model, response);
            },
            error: function(response) {
              app.error();
              return app.load(false);
            },
            wait: true
          });
        }
      });
    };

    Checkout.prototype.saveCcCheckout = function(token_id) {
      return app.api.post({
        url: 'cart/cc',
        data: {
          cc_id: token_id
        },
        success: function(response) {
          if ('success' === response.status) {
            app.models.cart.set(response.data);
            app.views.page.refreshModel('cart');
            app.views.page.refreshSubView('checkout/step_payment');
            app.views.page.refreshSubView('checkout/step_review');
            app.views.page.action.goTo('review');
          } else {
            app.error(response.message);
          }
          return app.load(false);
        },
        error: function(response) {
          app.error();
          return app.load(false);
        }
      });
    };

    Checkout.prototype.toggleForm = function(section) {
      var $form, $list;
      $form = $('form', '.step-' + section);
      $list = $('.form-list', '.step-' + section);
      if ($form.is(':visible')) {
        return $form.fadeOut(100, function() {
          return $list.fadeIn(100);
        });
      } else {
        return $list.fadeOut(100, function() {
          return $form.fadeIn(100);
        });
      }
    };

    return Checkout;

  })(Yulcom.View.Page);

  /* --------------------------------------------
       Begin template.coffee
  --------------------------------------------
  */


  app.template = {
    engines: [],
    requested: [],
    callback: {},
    render: function(template_id, object) {
      object = $.extend({
        customer: app.customer.toJSON()
      }, object);
      if (template_id) {
        if (this.engines[template_id]) {
          if (app.debug) {
            console.log(object, template_id);
          }
          return this.engines[template_id](object);
        } else {
          return alert('Unknow Template Engine [' + template_id + ']');
        }
      }
    },
    renderFromStringTemplate: function(template_string, object) {
      var template;
      object = $.extend({
        customer: app.customer.toJSON()
      }, object);
      template = Handlebars.compile(template_string);
      return template(object);
    },
    block: function(template_id, jquery_container) {
      var $container, content_html;
      content_html = this.render(template_id);
      $container = $(jquery_container);
      $container.html(content_html);
      return true;
    },
    loadTemplateHtml: function(template_id, callback) {
      if (!this.engines[template_id]) {
        if (!this.requested[template_id]) {
          this.requested[template_id] = true;
          this.callback[template_id] = [callback];
          return $.ajax({
            url: '/static/template/' + template_id + '.mustache',
            context: {
              engines: this.engines,
              template_id: template_id,
              callback: this.callback
            },
            success: function(response) {
              var _i, _len, _ref3, _results;
              this.engines[this.template_id] = Handlebars.compile(response);
              _ref3 = this.callback[this.template_id];
              _results = [];
              for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
                callback = _ref3[_i];
                _results.push(callback());
              }
              return _results;
            },
            cache: true,
            dataType: 'html'
          });
        } else {
          return this.callback[template_id].push(callback);
        }
      } else {
        return callback();
      }
    }
  };

  Handlebars.registerHelper('round', function(context) {
    return Math.round(context);
  });

  Handlebars.registerHelper('money', function(context) {
    var money;
    context = parseFloat(context);
    if (context >= 0) {
      return '$' + context.toFixed(2);
    } else {
      money = -1 * context;
      return '$' + money.toFixed(2) + '';
    }
  });

  Handlebars.registerHelper('time', function(context) {
    return window.moment(context * 1000).from();
  });

  /* --------------------------------------------
       Begin action.coffee
  --------------------------------------------
  */


  $(function() {
    return $('body').on('click', '[data-action]', function(event) {
      var $this, action, attr, scope;
      $this = $(this);
      attr = $this.attr("data-action").split('|');
      action = attr[0];
      scope = attr[1] != null ? attr[1] : "body";
      if (!action || action === '') {
        return false;
      }
      app.views.menu.nav.destroy();
      app.trigger(action, {
        scope: scope,
        cta: this
      });
      event.preventDefault();
      return false;
    });
  });

  /* --------------------------------------------
       Begin analytics.coffee
  --------------------------------------------
  */


  $(function() {
    app.on('all', app.analytics.trackEvent);
    return app.router.on('all', app.analytics.trackPageView);
  });

  app.analytics = {
    trackEvent: function(key) {},
    trackPageView: function(key) {}
  };

  /* --------------------------------------------
       Begin api.coffee
  --------------------------------------------
  */


  app.api = {
    post: function(obj) {
      if (obj.data) {
        if (typeof obj.data === 'string') {
          obj.data = this.stringToJson(obj.data);
        }
      }
      obj.url = app.get('api') + obj.url;
      obj.dataType = 'json';
      if (app.customer.isLogin()) {
        obj.beforeSend = function(xhr) {
          return xhr.setRequestHeader('Authorization', 'Basic ' + window.btoa(app.customer.get('session_key') + ':' + app.customer.get('session_password')));
        };
      }
      $.ajax(obj);
      return true;
    },
    stringToJson: function(string) {
      return JSON.parse('{"' + decodeURIComponent(string).replace(/"/g, '\\"').replace(/&/g, '","').replace(/\=/g, '":"') + '"}');
    }
  };

  /* --------------------------------------------
       Begin cookie.coffee
  --------------------------------------------
  */


  app.cookie = {
    read: function(key) {
      var regex, result;
      if (key == null) {
        key = '';
      }
      regex = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)');
      result = regex.exec(document.cookie);
      if (result != null) {
        return result[1];
      }
      return false;
    },
    write: function(c_name, value, exdays) {
      var c_value, exdate;
      if (value == null) {
        value = '';
      }
      if (exdays == null) {
        exdays = 360;
      }
      exdate = new Date();
      exdate.setDate(exdate.getDate() + exdays);
      c_value = escape(value);
      if (exdays != null) {
        c_value = c_value + "; expires=" + exdate.toUTCString();
      }
      document.cookie = c_name + "=" + c_value;
      return true;
    },
    "delete": function(c_name) {
      return document.cookie = encodeURIComponent(c_name) + "=deleted; expires=" + new Date(0).toUTCString();
    }
  };

  /* --------------------------------------------
       Begin validator.coffee
  --------------------------------------------
  */


  app.validation = {
    email: function(email) {
      return email.match(/^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/) != null;
    },
    name: function(name) {
      return name.length >= 2;
    },
    password: function(password) {
      return password.match(/^[a-zA-Z0-9!@#$%^&*]{6,16}$/) != null;
    },
    egals: function(str1, str2) {
      return str1 === str2;
    }
  };

  /* --------------------------------------------
       Begin base.coffee
  --------------------------------------------
  */


  Yulcom.Model.Base = (function(_super) {
    __extends(Base, _super);

    function Base() {
      _ref3 = Base.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Base.is_loaded = false;

    /*fetch: (obj = {}) ->
    		if app.customer.isLogin()
    			obj.beforeSend = (xhr) ->
    				xhr.setRequestHeader('Authorization', 'Basic ' + window.btoa(app.customer.get('session_key')+':'+app.customer.get('session_password')))
    		super obj
    */


    Base.prototype.parse = function(response) {
      if (response.data) {
        return response.data;
      } else {
        return response;
      }
    };

    return Base;

  })(Backbone.Model);

  /* --------------------------------------------
       Begin registry.coffee
  --------------------------------------------
  */


  ModelRegistry = Backbone.Model.extend();

  /* --------------------------------------------
       Begin product.coffee
  --------------------------------------------
  */


  app.models.product = Backbone.Model.extend({
    url: function() {
      return app.get('api') + 'catalog/product/' + this.id + '/details';
    },
    parse: function(response) {
      if (response.data) {
        return response.data;
      } else {
        return response;
      }
    }
  });

  /* --------------------------------------------
       Begin cart.coffee
  --------------------------------------------
  */


  Yulcom.Model.Cart = (function(_super) {
    __extends(Cart, _super);

    function Cart() {
      _ref4 = Cart.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Cart.prototype.is_loaded = false;

    Cart.prototype.url = function() {
      return app.get('api') + 'cart/';
    };

    Cart.prototype.item = {
      add: function(item) {
        app.load(true, '.page-product');
        return app.api.post({
          url: 'cart/product/add',
          data: {
            product_id: item
          },
          success: function(response) {
            app.load(false);
            if ('success' === response.status) {
              app.models.cart.set(response.data);
              app.models.cart.is_loaded = true;
              return app.router.redirect('cart');
            } else {
              return app.error(response.message);
            }
          }
        });
      },
      remove: function(item_id) {
        app.load(true, '.main-cta');
        app.api.post({
          url: 'cart/product/remove',
          data: {
            item_id: item_id
          },
          context: {
            item_id: item_id
          },
          success: function(response) {
            if ('success' === response.status) {
              return $(".item-" + item_id).fadeOut(300, function() {
                app.load(false);
                app.models.cart.set(response.data);
                app.models.cart.is_loaded = true;
                return app.router.reload('cart');
              });
            } else {
              return app.error(response.message);
            }
          }
        });
        $(".item-" + item_id).animate({
          opacity: 0.5
        });
        return 200;
      }
    };

    Cart.prototype.coupon = {
      add: function(coupon) {
        app.load(true, '.cart-form-coupon');
        return app.api.post({
          url: 'cart/coupon',
          data: {
            coupon: coupon
          },
          success: function(response) {
            app.load(false);
            if ('success' === response.status) {
              app.models.cart.set(response.data);
              app.models.cart.is_loaded = true;
              return app.router.reload('cart');
            } else {
              app.error(response.message);
              return $('input').first().select();
            }
          }
        });
      },
      remove: function() {
        return this.add('');
      }
    };

    return Cart;

  })(Yulcom.Model.Base);

  /* --------------------------------------------
       Begin customer.coffee
  --------------------------------------------
  */


  Yulcom.Model.Customer = (function(_super) {
    __extends(Customer, _super);

    function Customer() {
      _ref5 = Customer.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Customer.prototype.defaults = {
      is_login: false,
      session_key: false,
      session_password: false
    };

    Customer.prototype.init = function() {
      var k, p;
      k = app.cookie.read('ycsk');
      p = app.cookie.read('ycsd');
      if (false === k || false === p || 'false' === k || 'false' === p) {
        return;
      }
      return this.login.saveSessionInfo(k, p, {});
    };

    Customer.prototype.isLogin = function() {
      return this.get('is_login');
    };

    Customer.prototype.logout = function() {
      app.cookie.write('ycsk', false);
      app.cookie.write('ycsd', false);
      app.customer.set('session_key', false);
      app.customer.set('session_password', false);
      app.customer.set('customer_details', {});
      return app.customer.set('is_login', false);
    };

    Customer.prototype.login = {
      saveEmail: function() {
        var email;
        email = $('.login-step1 input[name=email]').val();
        app.load(true, '.login-box');
        if (app.validation.email(email)) {
          return $('.login-box .login-step1').fadeOut(200, function() {
            $('.login-box .login-step2').fadeIn(200);
            $('.login-step2 input[type=textbox]').first().focus();
            return app.load(false);
          });
        } else {
          app.error('Invalid Email Address', '.login-box');
          $('.login-step1 input[type=textbox]').first().focus();
          return app.load(false, '.login-box');
        }
      },
      savePassword: function() {
        var email, firstname, lastname, password, password2;
        app.load(true, '.login-box');
        email = $('.login-step1 input[name=email]').val();
        firstname = $('.login-step2 input[name=firstname]').val();
        lastname = $('.login-step2 input[name=lastname]').val();
        password = $('.login-step2 input[name=password]').val();
        password2 = $('.login-step2 input[name=password2]').val();
        if (!app.validation.name(firstname)) {
          app.error('Please enter a valid firstname', '.login-box');
          $('.login-step2 input[name=firstname]').first().focus();
          app.load(false);
          return;
        }
        if (!app.validation.name(lastname)) {
          app.error('Please enter a valid lastname', '.login-box');
          $('.login-step2 input[name=lastname]').first().focus();
          app.load(false);
          return;
        }
        if (!app.validation.password(password)) {
          app.error('Password must be between 6 and 16 characters', '.login-box');
          $('.login-step2 input[name=password]').first().focus();
          app.load(false);
          return;
        }
        if (!app.validation.egals(password, password2)) {
          app.error('Both password must match', '.login-box');
          $('.login-step2 input[name=password2]').first().focus();
          app.load(false);
          return;
        }
        return app.api.post({
          url: 'customer/signup',
          data: {
            email: email,
            password: password,
            details: {
              firstname: firstname,
              lastname: lastname
            }
          },
          success: function(response) {
            app.load(false);
            if (response.status === 'success') {
              app.customer.login.saveSessionInfo(response.data.session_id, response.data.session_key, response.data.customer_details);
              return $('.login-box .login-step2').fadeOut(200, function() {
                return $('.login-box .login-step4').fadeIn(200);
              });
            } else {
              return app.error(response.message);
            }
          },
          error: function(response) {
            app.error('Unknow server error');
            return app.load(false);
          }
        });
      },
      showLogin: function() {
        app.load(true, '.login-box');
        return $('.login-box .login-step1').fadeOut(200, function() {
          $('.login-box .login-step3').fadeIn(200);
          $('.login-step3 input[type=textbox]').first().focus();
          return app.load(false);
        });
      },
      showAccountCreation: function() {
        app.load(true, '.login-box');
        return $('.login-box .login-step3').fadeOut(200, function() {
          $('.login-box .login-step1').fadeIn(200);
          $('.login-step1 input[type=textbox]').first().focus();
          return app.load(false);
        });
      },
      saveSessionInfo: function(k, p, d) {
        app.customer.set('session_key', k);
        app.customer.set('session_password', p);
        app.customer.set('customer_details', d);
        app.customer.set('is_login', true);
        app.cookie.write('ycsk', k);
        app.cookie.write('ycsd', p);
        return $.ajaxSetup({
          headers: {
            'Authorization': 'Basic ' + window.btoa(k + ':' + p)
          }
        });
      },
      login: function() {
        var email, password;
        app.load(true, '.login-box');
        email = $('.login-step3 input[name=email]').val();
        password = $('.login-step3 input[name=password]').val();
        if (!app.validation.name(email)) {
          app.error('Please enter an email address', '.login-box');
          $('.login-step3 input[name=email]').first().focus();
          app.load(false);
          return;
        }
        if (!app.validation.name(password)) {
          app.error('Please enter a  pasword', '.login-box');
          $('.login-step3 input[name=password]').first().focus();
          app.load(false);
          return;
        }
        return app.api.post({
          url: 'customer/session',
          type: 'POST',
          data: {
            email: email,
            password: password
          },
          success: function(response) {
            app.load(false);
            if (response.status === 'success') {
              app.customer.login.saveSessionInfo(response.data.session_id, response.data.session_key, response.data.customer_details);
              return $('.login-box .login-step3').fadeOut(200, function() {
                return $('.login-box .login-step3').fadeIn(200);
              });
            } else {
              return app.error(response.message);
            }
          },
          error: function(response) {
            app.error('Unknow server error');
            return app.load(false);
          }
        });
      }
    };

    return Customer;

  })(Backbone.Model);

  /* --------------------------------------------
       Begin address.coffee
  --------------------------------------------
  */


  Yulcom.Model.CustomerAddress = (function(_super) {
    __extends(CustomerAddress, _super);

    function CustomerAddress() {
      _ref6 = CustomerAddress.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    CustomerAddress.prototype.url = function() {
      return app.get('api') + 'customer/address';
    };

    return CustomerAddress;

  })(Yulcom.Model.Base);

  /* --------------------------------------------
       Begin cc.coffee
  --------------------------------------------
  */


  Yulcom.Model.CustomerCc = (function(_super) {
    __extends(CustomerCc, _super);

    function CustomerCc() {
      _ref7 = CustomerCc.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    CustomerCc.prototype.url = function() {
      return app.get('api') + 'customer/cc';
    };

    return CustomerCc;

  })(Yulcom.Model.Base);

  /* --------------------------------------------
       Begin base.coffee
  --------------------------------------------
  */


  Yulcom.Collection.Base = (function(_super) {
    __extends(Base, _super);

    function Base() {
      _ref8 = Base.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    Base.prototype.is_loaded = false;

    Base.prototype.parse = function(response) {
      this.is_loaded = true;
      if (response.data.items) {
        return response.data.items;
      } else {
        return response.data;
      }
    };

    /*fetch: (obj = {}) ->
    		if app.customer.isLogin()
    			obj.beforeSend = (xhr) ->
    				xhr.setRequestHeader('Authorization', 'Basic ' + window.btoa(app.customer.get('session_key')+':'+app.customer.get('session_password')))
    		
    		super obj
    */


    return Base;

  })(Backbone.Collection);

  /* --------------------------------------------
       Begin product.coffee
  --------------------------------------------
  */


  Yulcom.Collection.Product = (function(_super) {
    __extends(Product, _super);

    function Product() {
      _ref9 = Product.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    Product.prototype.model = app.models.product;

    Product.prototype.url = app.get('api') + 'catalog/product/list';

    Product.prototype.parse = function(response) {
      this.is_loaded = true;
      return _.map(response.data.items, function(obj) {
        delete obj._;
        return obj;
      });
    };

    return Product;

  })(Yulcom.Collection.Base);

  /* --------------------------------------------
       Begin address.coffee
  --------------------------------------------
  */


  Yulcom.Collection.Address = (function(_super) {
    __extends(Address, _super);

    function Address() {
      _ref10 = Address.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    Address.prototype.model = Yulcom.Model.CustomerAddress;

    Address.prototype.url = function() {
      return app.get('api') + 'customer/address/list';
    };

    return Address;

  })(Yulcom.Collection.Base);

  /* --------------------------------------------
       Begin cc.coffee
  --------------------------------------------
  */


  Yulcom.Collection.Cc = (function(_super) {
    __extends(Cc, _super);

    function Cc() {
      _ref11 = Cc.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    Cc.prototype.model = Yulcom.Model.CustomerCc;

    Cc.prototype.url = function() {
      return app.get('api') + 'customer/cc/list';
    };

    return Cc;

  })(Yulcom.Collection.Base);

  /* --------------------------------------------
       Begin router.coffee
  --------------------------------------------
  */


  Yulcom.Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      _ref12 = Router.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    Router.prototype.routes = {
      'login(/)': 'login',
      'products(/)': 'product',
      'products/:key(/)': 'productView',
      'cart(/)': 'cart',
      'checkout(/)': 'checkout',
      'help(/)': 'help',
      'profil(/)': 'profil',
      'error(/)(:number)': 'error',
      'logout(/)': 'logout',
      '': 'home',
      ':path': 'error'
    };

    Router.prototype.initialize = function() {
      return Backbone.history.start({
        pushState: true
      });
    };

    Router.prototype.load = function(page_definition) {
      return app.views.page.load(page_definition);
    };

    Router.prototype.reload = function() {
      Backbone.history.stop();
      return Backbone.history.start();
    };

    Router.prototype.redirect = function(url) {
      return this.navigate(url, {
        trigger: true
      });
    };

    Router.prototype.home = function() {
      app.views.page.reset();
      app.views.page.loadTemplate('index');
      app.views.page.title('Home | Yulcom Demo');
      return app.views.page.load({
        menu: 'index'
      });
    };

    Router.prototype.login = function() {
      if (app.customer.isLogin()) {
        return this.redirect('/');
      } else {
        app.views.page.reset();
        app.views.page.loadTemplate('login');
        app.views.page.title('Login | Yulcom Demo');
        return app.views.page.load({
          menu: 'login'
        });
      }
    };

    Router.prototype.product = function() {
      app.views.page.reset();
      app.views.page.loadCollection('products', app.collections.products);
      app.views.page.loadTemplate('product/list');
      app.views.page.title('Products | Yulcom Demo');
      return app.views.page.load({
        menu: 'products'
      });
    };

    Router.prototype.productView = function(product_id) {
      app.views.page.reset();
      app.views.page.loadModel('product', new app.models.product({
        id: product_id
      }));
      app.views.page.loadTemplate('product/view');
      app.views.page.title('{{product.name}} | Products | Yulcom Demo');
      return app.views.page.load({
        menu: 'products'
      });
    };

    Router.prototype.cart = function() {
      if (app.customer.isLogin()) {
        app.views.page.reset();
        app.views.page.loadTemplate('cart/cart');
        app.views.page.loadModel('cart', app.models.cart);
        app.views.page.title('Cart | Yulcom Demo');
        return app.views.page.load({
          menu: 'cart'
        });
      } else {
        return this.redirect('/login');
      }
    };

    Router.prototype.checkout = function() {
      if (app.customer.isLogin()) {
        app.views.page.reset();
        app.views.page.action = new Yulcom.View.Checkout;
        app.views.page.loadModel('cart', app.models.cart);
        app.views.page.loadCollection('address', app.collections.address);
        app.views.page.loadCollection('cc', app.collections.cc);
        app.views.page.loadTemplate('checkout/checkout');
        app.views.page.loadSubView('li.step-shipping-address', 'checkout/step_shipping_address');
        app.views.page.loadSubView('li.step-billing-address', 'checkout/step_billing_address');
        app.views.page.loadSubView('li.step-payment-method', 'checkout/step_payment');
        app.views.page.loadSubView('li.step-review', 'checkout/step_review');
        app.views.page.title('Checkout | Yulcom Demo');
        app.views.page.callback(app.views.page.action.init);
        return app.views.page.load({
          menu: 'cart'
        });
      } else {
        return this.redirect('/login');
      }
    };

    Router.prototype.logout = function() {
      app.customer.logout();
      return location.href = '/';
    };

    Router.prototype._updateTitle = function(title) {
      return $('title').text(title);
    };

    return Router;

  })(Backbone.Router);

  $(function() {
    return $(".wrapper").on("click", "a", function(e) {
      var href;
      href = $(this).attr("href");
      if (href && href.length > 1 && href.substring(0, 3) !== 'tel' && href.substring(0, 4) !== 'http' && href !== '#nav') {
        app.router.redirect(href);
        return e.preventDefault();
      }
    });
  });

  /* --------------------------------------------
       Begin app.coffee
  --------------------------------------------
  */


}).call(this);
